{"version":3,"file":"js/vendors-fc19362f.8934b110.js","mappings":"mMAIIA,EAA2B,WAC3B,SAASA,EAAUC,EAAOC,GAGtB,IAAIC,EAEJ,QAJc,IAAVF,IAAoBA,EAAQ,SACnB,IAATC,IAAmBA,EAAO,CAAC,GAG3BD,aAAiBD,EAEjB,OAAOC,EAEU,kBAAVA,IACPA,GAAQ,QAAoBA,IAEhCG,KAAKC,cAAgBJ,EACrB,IAAIK,GAAM,QAAWL,GACrBG,KAAKC,cAAgBJ,EACrBG,KAAKG,EAAID,EAAIC,EACbH,KAAKI,EAAIF,EAAIE,EACbJ,KAAKK,EAAIH,EAAIG,EACbL,KAAKM,EAAIJ,EAAII,EACbN,KAAKO,OAASC,KAAKC,MAAM,IAAMT,KAAKM,GAAK,IACzCN,KAAKU,OAAgC,QAAtBX,EAAKD,EAAKY,cAA2B,IAAPX,EAAgBA,EAAKG,EAAIQ,OACtEV,KAAKW,aAAeb,EAAKa,aAKrBX,KAAKG,EAAI,IACTH,KAAKG,EAAIK,KAAKC,MAAMT,KAAKG,IAEzBH,KAAKI,EAAI,IACTJ,KAAKI,EAAII,KAAKC,MAAMT,KAAKI,IAEzBJ,KAAKK,EAAI,IACTL,KAAKK,EAAIG,KAAKC,MAAMT,KAAKK,IAE7BL,KAAKY,QAAUV,EAAIW,EACvB,CA0cA,OAzcAjB,EAAUkB,UAAUC,OAAS,WACzB,OAAOf,KAAKgB,gBAAkB,GAClC,EACApB,EAAUkB,UAAUG,QAAU,WAC1B,OAAQjB,KAAKe,QACjB,EAIAnB,EAAUkB,UAAUE,cAAgB,WAEhC,IAAId,EAAMF,KAAKkB,QACf,OAAgB,IAARhB,EAAIC,EAAkB,IAARD,EAAIE,EAAkB,IAARF,EAAIG,GAAW,GACvD,EAIAT,EAAUkB,UAAUK,aAAe,WAE/B,IACIC,EACAC,EACAC,EAHApB,EAAMF,KAAKkB,QAIXK,EAAQrB,EAAIC,EAAI,IAChBqB,EAAQtB,EAAIE,EAAI,IAChBqB,EAAQvB,EAAIG,EAAI,IAsBpB,OApBIe,EADAG,GAAS,OACLA,EAAQ,MAIRf,KAAKkB,KAAKH,EAAQ,MAAS,MAAO,KAGtCF,EADAG,GAAS,OACLA,EAAQ,MAIRhB,KAAKkB,KAAKF,EAAQ,MAAS,MAAO,KAGtCF,EADAG,GAAS,OACLA,EAAQ,MAIRjB,KAAKkB,KAAKD,EAAQ,MAAS,MAAO,KAEnC,MAASL,EAAI,MAASC,EAAI,MAASC,CAC9C,EAIA1B,EAAUkB,UAAUa,SAAW,WAC3B,OAAO3B,KAAKM,CAChB,EAMAV,EAAUkB,UAAUc,SAAW,SAAUC,GAGrC,OAFA7B,KAAKM,GAAI,QAAWuB,GACpB7B,KAAKO,OAASC,KAAKC,MAAM,IAAMT,KAAKM,GAAK,IAClCN,IACX,EAIAJ,EAAUkB,UAAUgB,aAAe,WAC/B,IAAIC,EAAI/B,KAAKgC,QAAQD,EACrB,OAAa,IAANA,CACX,EAIAnC,EAAUkB,UAAUmB,MAAQ,WACxB,IAAIC,GAAM,QAASlC,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,GACxC,MAAO,CAAE8B,EAAW,IAARD,EAAIC,EAASJ,EAAGG,EAAIH,EAAGK,EAAGF,EAAIE,EAAG9B,EAAGN,KAAKM,EACzD,EAKAV,EAAUkB,UAAUuB,YAAc,WAC9B,IAAIH,GAAM,QAASlC,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,GACpC8B,EAAI3B,KAAKC,MAAc,IAARyB,EAAIC,GACnBJ,EAAIvB,KAAKC,MAAc,IAARyB,EAAIH,GACnBK,EAAI5B,KAAKC,MAAc,IAARyB,EAAIE,GACvB,OAAkB,IAAXpC,KAAKM,EAAU,OAAOgC,OAAOH,EAAG,MAAMG,OAAOP,EAAG,OAAOO,OAAOF,EAAG,MAAQ,QAAQE,OAAOH,EAAG,MAAMG,OAAOP,EAAG,OAAOO,OAAOF,EAAG,OAAOE,OAAOtC,KAAKO,OAAQ,IAClK,EAIAX,EAAUkB,UAAUkB,MAAQ,WACxB,IAAIO,GAAM,QAASvC,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,GACxC,MAAO,CAAE8B,EAAW,IAARI,EAAIJ,EAASJ,EAAGQ,EAAIR,EAAGS,EAAGD,EAAIC,EAAGlC,EAAGN,KAAKM,EACzD,EAKAV,EAAUkB,UAAU2B,YAAc,WAC9B,IAAIF,GAAM,QAASvC,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,GACpC8B,EAAI3B,KAAKC,MAAc,IAAR8B,EAAIJ,GACnBJ,EAAIvB,KAAKC,MAAc,IAAR8B,EAAIR,GACnBS,EAAIhC,KAAKC,MAAc,IAAR8B,EAAIC,GACvB,OAAkB,IAAXxC,KAAKM,EAAU,OAAOgC,OAAOH,EAAG,MAAMG,OAAOP,EAAG,OAAOO,OAAOE,EAAG,MAAQ,QAAQF,OAAOH,EAAG,MAAMG,OAAOP,EAAG,OAAOO,OAAOE,EAAG,OAAOF,OAAOtC,KAAKO,OAAQ,IAClK,EAKAX,EAAUkB,UAAU4B,MAAQ,SAAUC,GAElC,YADmB,IAAfA,IAAyBA,GAAa,IACnC,QAAS3C,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,EAAGsC,EAC5C,EAKA/C,EAAUkB,UAAU8B,YAAc,SAAUD,GAExC,YADmB,IAAfA,IAAyBA,GAAa,GACnC,IAAM3C,KAAK0C,MAAMC,EAC5B,EAKA/C,EAAUkB,UAAU+B,OAAS,SAAUC,GAEnC,YADmB,IAAfA,IAAyBA,GAAa,IACnC,OAAU9C,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,EAAGL,KAAKM,EAAGwC,EACrD,EAKAlD,EAAUkB,UAAUiC,aAAe,SAAUD,GAEzC,YADmB,IAAfA,IAAyBA,GAAa,GACnC,IAAM9C,KAAK6C,OAAOC,EAC7B,EAKAlD,EAAUkB,UAAUkC,iBAAmB,SAAUC,GAE7C,YADuB,IAAnBA,IAA6BA,GAAiB,GAChC,IAAXjD,KAAKM,EAAUN,KAAK4C,YAAYK,GAAkBjD,KAAK+C,aAAaE,EAC/E,EAIArD,EAAUkB,UAAUI,MAAQ,WACxB,MAAO,CACHf,EAAGK,KAAKC,MAAMT,KAAKG,GACnBC,EAAGI,KAAKC,MAAMT,KAAKI,GACnBC,EAAGG,KAAKC,MAAMT,KAAKK,GACnBC,EAAGN,KAAKM,EAEhB,EAKAV,EAAUkB,UAAUoC,YAAc,WAC9B,IAAI/C,EAAIK,KAAKC,MAAMT,KAAKG,GACpBC,EAAII,KAAKC,MAAMT,KAAKI,GACpBC,EAAIG,KAAKC,MAAMT,KAAKK,GACxB,OAAkB,IAAXL,KAAKM,EAAU,OAAOgC,OAAOnC,EAAG,MAAMmC,OAAOlC,EAAG,MAAMkC,OAAOjC,EAAG,KAAO,QAAQiC,OAAOnC,EAAG,MAAMmC,OAAOlC,EAAG,MAAMkC,OAAOjC,EAAG,MAAMiC,OAAOtC,KAAKO,OAAQ,IAC9J,EAIAX,EAAUkB,UAAUqC,gBAAkB,WAClC,IAAIC,EAAM,SAAUC,GAAK,MAAO,GAAGf,OAAO9B,KAAKC,MAAwB,KAAlB,QAAQ4C,EAAG,MAAa,IAAM,EACnF,MAAO,CACHlD,EAAGiD,EAAIpD,KAAKG,GACZC,EAAGgD,EAAIpD,KAAKI,GACZC,EAAG+C,EAAIpD,KAAKK,GACZC,EAAGN,KAAKM,EAEhB,EAIAV,EAAUkB,UAAUwC,sBAAwB,WACxC,IAAIC,EAAM,SAAUF,GAAK,OAAO7C,KAAKC,MAAwB,KAAlB,QAAQ4C,EAAG,KAAa,EACnE,OAAkB,IAAXrD,KAAKM,EACN,OAAOgC,OAAOiB,EAAIvD,KAAKG,GAAI,OAAOmC,OAAOiB,EAAIvD,KAAKI,GAAI,OAAOkC,OAAOiB,EAAIvD,KAAKK,GAAI,MACjF,QAAQiC,OAAOiB,EAAIvD,KAAKG,GAAI,OAAOmC,OAAOiB,EAAIvD,KAAKI,GAAI,OAAOkC,OAAOiB,EAAIvD,KAAKK,GAAI,OAAOiC,OAAOtC,KAAKO,OAAQ,IACvH,EAIAX,EAAUkB,UAAU0C,OAAS,WACzB,GAAe,IAAXxD,KAAKM,EACL,MAAO,cAEX,GAAIN,KAAKM,EAAI,EACT,OAAO,EAGX,IADA,IAAImD,EAAM,KAAM,QAASzD,KAAKG,EAAGH,KAAKI,EAAGJ,KAAKK,GAAG,GACxCqD,EAAK,EAAG3D,EAAK4D,OAAOC,QAAQ,KAAQF,EAAK3D,EAAG8D,OAAQH,IAAM,CAC/D,IAAII,EAAK/D,EAAG2D,GAAKK,EAAMD,EAAG,GAAIE,EAAQF,EAAG,GACzC,GAAIL,IAAQO,EACR,OAAOD,CAEf,CACA,OAAO,CACX,EACAnE,EAAUkB,UAAUmD,SAAW,SAAUvD,GACrC,IAAIwD,EAAYC,QAAQzD,GACxBA,EAAoB,OAAXA,QAA8B,IAAXA,EAAoBA,EAASV,KAAKU,OAC9D,IAAI0D,GAAkB,EAClBC,EAAWrE,KAAKM,EAAI,GAAKN,KAAKM,GAAK,EACnCgE,GAAoBJ,GAAaG,IAAa3D,EAAO6D,WAAW,QAAqB,SAAX7D,GAC9E,OAAI4D,EAGe,SAAX5D,GAAgC,IAAXV,KAAKM,EACnBN,KAAKwD,SAETxD,KAAKkD,eAED,QAAXxC,IACA0D,EAAkBpE,KAAKkD,eAEZ,SAAXxC,IACA0D,EAAkBpE,KAAKsD,yBAEZ,QAAX5C,GAA+B,SAAXA,IACpB0D,EAAkBpE,KAAK4C,eAEZ,SAAXlC,IACA0D,EAAkBpE,KAAK4C,aAAY,IAExB,SAAXlC,IACA0D,EAAkBpE,KAAK+C,cAAa,IAEzB,SAAXrC,IACA0D,EAAkBpE,KAAK+C,gBAEZ,SAAXrC,IACA0D,EAAkBpE,KAAKwD,UAEZ,QAAX9C,IACA0D,EAAkBpE,KAAKyC,eAEZ,QAAX/B,IACA0D,EAAkBpE,KAAKqC,eAEpB+B,GAAmBpE,KAAK4C,cACnC,EACAhD,EAAUkB,UAAU0D,SAAW,WAC3B,OAAQhE,KAAKC,MAAMT,KAAKG,IAAM,KAAOK,KAAKC,MAAMT,KAAKI,IAAM,GAAKI,KAAKC,MAAMT,KAAKK,EACpF,EACAT,EAAUkB,UAAU2D,MAAQ,WACxB,OAAO,IAAI7E,EAAUI,KAAKiE,WAC9B,EAKArE,EAAUkB,UAAU4D,QAAU,SAAUC,QACrB,IAAXA,IAAqBA,EAAS,IAClC,IAAIpC,EAAMvC,KAAKgC,QAGf,OAFAO,EAAIC,GAAKmC,EAAS,IAClBpC,EAAIC,GAAI,QAAQD,EAAIC,GACb,IAAI5C,EAAU2C,EACzB,EAKA3C,EAAUkB,UAAU8D,SAAW,SAAUD,QACtB,IAAXA,IAAqBA,EAAS,IAClC,IAAIzE,EAAMF,KAAKkB,QAIf,OAHAhB,EAAIC,EAAIK,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAI,IAAK5E,EAAIC,EAAIK,KAAKC,OAAckE,EAAS,IAAjB,OACrDzE,EAAIE,EAAII,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAI,IAAK5E,EAAIE,EAAII,KAAKC,OAAckE,EAAS,IAAjB,OACrDzE,EAAIG,EAAIG,KAAKqE,IAAI,EAAGrE,KAAKsE,IAAI,IAAK5E,EAAIG,EAAIG,KAAKC,OAAckE,EAAS,IAAjB,OAC9C,IAAI/E,EAAUM,EACzB,EAMAN,EAAUkB,UAAUiE,OAAS,SAAUJ,QACpB,IAAXA,IAAqBA,EAAS,IAClC,IAAIpC,EAAMvC,KAAKgC,QAGf,OAFAO,EAAIC,GAAKmC,EAAS,IAClBpC,EAAIC,GAAI,QAAQD,EAAIC,GACb,IAAI5C,EAAU2C,EACzB,EAMA3C,EAAUkB,UAAUkE,KAAO,SAAUL,GAEjC,YADe,IAAXA,IAAqBA,EAAS,IAC3B3E,KAAKiF,IAAI,QAASN,EAC7B,EAMA/E,EAAUkB,UAAUoE,MAAQ,SAAUP,GAElC,YADe,IAAXA,IAAqBA,EAAS,IAC3B3E,KAAKiF,IAAI,QAASN,EAC7B,EAMA/E,EAAUkB,UAAUqE,WAAa,SAAUR,QACxB,IAAXA,IAAqBA,EAAS,IAClC,IAAIpC,EAAMvC,KAAKgC,QAGf,OAFAO,EAAIR,GAAK4C,EAAS,IAClBpC,EAAIR,GAAI,QAAQQ,EAAIR,GACb,IAAInC,EAAU2C,EACzB,EAKA3C,EAAUkB,UAAUsE,SAAW,SAAUT,QACtB,IAAXA,IAAqBA,EAAS,IAClC,IAAIpC,EAAMvC,KAAKgC,QAGf,OAFAO,EAAIR,GAAK4C,EAAS,IAClBpC,EAAIR,GAAI,QAAQQ,EAAIR,GACb,IAAInC,EAAU2C,EACzB,EAKA3C,EAAUkB,UAAUuE,UAAY,WAC5B,OAAOrF,KAAKmF,WAAW,IAC3B,EAKAvF,EAAUkB,UAAUwE,KAAO,SAAUX,GACjC,IAAIpC,EAAMvC,KAAKgC,QACXuD,GAAOhD,EAAIJ,EAAIwC,GAAU,IAE7B,OADApC,EAAIJ,EAAIoD,EAAM,EAAI,IAAMA,EAAMA,EACvB,IAAI3F,EAAU2C,EACzB,EAKA3C,EAAUkB,UAAUmE,IAAM,SAAUpF,EAAO8E,QACxB,IAAXA,IAAqBA,EAAS,IAClC,IAAIa,EAAOxF,KAAKkB,QACZuE,EAAO,IAAI7F,EAAUC,GAAOqB,QAC5BwE,EAAIf,EAAS,IACbgB,EAAO,CACPxF,GAAIsF,EAAKtF,EAAIqF,EAAKrF,GAAKuF,EAAIF,EAAKrF,EAChCC,GAAIqF,EAAKrF,EAAIoF,EAAKpF,GAAKsF,EAAIF,EAAKpF,EAChCC,GAAIoF,EAAKpF,EAAImF,EAAKnF,GAAKqF,EAAIF,EAAKnF,EAChCC,GAAImF,EAAKnF,EAAIkF,EAAKlF,GAAKoF,EAAIF,EAAKlF,GAEpC,OAAO,IAAIV,EAAU+F,EACzB,EACA/F,EAAUkB,UAAU8E,UAAY,SAAUC,EAASC,QAC/B,IAAZD,IAAsBA,EAAU,QACrB,IAAXC,IAAqBA,EAAS,IAClC,IAAIvD,EAAMvC,KAAKgC,QACX+D,EAAO,IAAMD,EACbE,EAAM,CAAChG,MACX,IAAKuC,EAAIJ,GAAKI,EAAIJ,GAAM4D,EAAOF,GAAY,GAAK,KAAO,MAAOA,GAC1DtD,EAAIJ,GAAKI,EAAIJ,EAAI4D,GAAQ,IACzBC,EAAIC,KAAK,IAAIrG,EAAU2C,IAE3B,OAAOyD,CACX,EAIApG,EAAUkB,UAAUoF,WAAa,WAC7B,IAAI3D,EAAMvC,KAAKgC,QAEf,OADAO,EAAIJ,GAAKI,EAAIJ,EAAI,KAAO,IACjB,IAAIvC,EAAU2C,EACzB,EACA3C,EAAUkB,UAAUqF,cAAgB,SAAUN,QAC1B,IAAZA,IAAsBA,EAAU,GACpC,IAAI3D,EAAMlC,KAAKiC,QACXE,EAAID,EAAIC,EACRJ,EAAIG,EAAIH,EACRK,EAAIF,EAAIE,EACRgE,EAAM,GACNC,EAAe,EAAIR,EACvB,MAAOA,IACHO,EAAIH,KAAK,IAAIrG,EAAU,CAAEuC,EAAGA,EAAGJ,EAAGA,EAAGK,EAAGA,KACxCA,GAAKA,EAAIiE,GAAgB,EAE7B,OAAOD,CACX,EACAxG,EAAUkB,UAAUwF,gBAAkB,WAClC,IAAI/D,EAAMvC,KAAKgC,QACXG,EAAII,EAAIJ,EACZ,MAAO,CACHnC,KACA,IAAIJ,EAAU,CAAEuC,GAAIA,EAAI,IAAM,IAAKJ,EAAGQ,EAAIR,EAAGS,EAAGD,EAAIC,IACpD,IAAI5C,EAAU,CAAEuC,GAAIA,EAAI,KAAO,IAAKJ,EAAGQ,EAAIR,EAAGS,EAAGD,EAAIC,IAE7D,EAIA5C,EAAUkB,UAAUyF,aAAe,SAAUC,GACzC,IAAIC,EAAKzG,KAAKkB,QACVwF,EAAK,IAAI9G,EAAU4G,GAAYtF,QAC/BW,EAAQ4E,EAAGnG,EAAIoG,EAAGpG,GAAK,EAAImG,EAAGnG,GAClC,OAAO,IAAIV,EAAU,CACjBO,GAAIsG,EAAGtG,EAAIsG,EAAGnG,EAAIoG,EAAGvG,EAAIuG,EAAGpG,GAAK,EAAImG,EAAGnG,IAAMuB,EAC9CzB,GAAIqG,EAAGrG,EAAIqG,EAAGnG,EAAIoG,EAAGtG,EAAIsG,EAAGpG,GAAK,EAAImG,EAAGnG,IAAMuB,EAC9CxB,GAAIoG,EAAGpG,EAAIoG,EAAGnG,EAAIoG,EAAGrG,EAAIqG,EAAGpG,GAAK,EAAImG,EAAGnG,IAAMuB,EAC9CvB,EAAGuB,GAEX,EAIAjC,EAAUkB,UAAU6F,MAAQ,WACxB,OAAO3G,KAAK4G,OAAO,EACvB,EAIAhH,EAAUkB,UAAU+F,OAAS,WACzB,OAAO7G,KAAK4G,OAAO,EACvB,EAKAhH,EAAUkB,UAAU8F,OAAS,SAAUE,GAKnC,IAJA,IAAIvE,EAAMvC,KAAKgC,QACXG,EAAII,EAAIJ,EACR4E,EAAS,CAAC/G,MACVgH,EAAY,IAAMF,EACbG,EAAI,EAAGA,EAAIH,EAAGG,IACnBF,EAAOd,KAAK,IAAIrG,EAAU,CAAEuC,GAAIA,EAAI8E,EAAID,GAAa,IAAKjF,EAAGQ,EAAIR,EAAGS,EAAGD,EAAIC,KAE/E,OAAOuE,CACX,EAIAnH,EAAUkB,UAAUoG,OAAS,SAAUrH,GACnC,OAAOG,KAAKkD,gBAAkB,IAAItD,EAAUC,GAAOqD,aACvD,EACOtD,CACX,CAhf8B,E,wDCAvB,IAAIuH,EAAQ,CACfC,UAAW,UACXC,aAAc,UACdC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,MAAO,UACPC,OAAQ,UACRC,MAAO,UACPC,eAAgB,UAChBC,KAAM,UACNC,WAAY,UACZC,MAAO,UACPC,UAAW,UACXC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,MAAO,UACPC,eAAgB,UAChBC,SAAU,UACVC,QAAS,UACTC,KAAM,UACNC,SAAU,UACVC,SAAU,UACVC,cAAe,UACfC,SAAU,UACVC,UAAW,UACXC,SAAU,UACVC,UAAW,UACXC,YAAa,UACbC,eAAgB,UAChBC,WAAY,UACZC,WAAY,UACZC,QAAS,UACTC,WAAY,UACZC,aAAc,UACdC,cAAe,UACfC,cAAe,UACfC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,SAAU,UACVC,YAAa,UACbC,QAAS,UACTC,QAAS,UACTC,WAAY,UACZC,UAAW,UACXC,YAAa,UACbC,YAAa,UACbC,QAAS,UACTC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,MAAO,UACPC,YAAa,UACbC,KAAM,UACNC,SAAU,UACVC,QAAS,UACTC,UAAW,UACXC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,cAAe,UACfC,SAAU,UACVC,UAAW,UACXC,aAAc,UACdC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,qBAAsB,UACtBC,UAAW,UACXC,WAAY,UACZC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,cAAe,UACfC,aAAc,UACdC,eAAgB,UAChBC,eAAgB,UAChBC,eAAgB,UAChBC,YAAa,UACbC,KAAM,UACNC,UAAW,UACXC,MAAO,UACPC,QAAS,UACTC,OAAQ,UACRC,iBAAkB,UAClBC,WAAY,UACZC,aAAc,UACdC,aAAc,UACdC,eAAgB,UAChBC,gBAAiB,UACjBC,kBAAmB,UACnBC,gBAAiB,UACjBC,gBAAiB,UACjBC,aAAc,UACdC,UAAW,UACXC,UAAW,UACXC,SAAU,UACVC,YAAa,UACbC,KAAM,UACNC,QAAS,UACTC,MAAO,UACPC,UAAW,UACXC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,cAAe,UACfC,UAAW,UACXC,cAAe,UACfC,cAAe,UACfC,WAAY,UACZC,UAAW,UACXC,KAAM,UACNC,KAAM,UACNC,KAAM,UACNC,WAAY,UACZC,OAAQ,UACRC,cAAe,UACfC,IAAK,UACLC,UAAW,UACXC,UAAW,UACXC,YAAa,UACbC,OAAQ,UACRC,WAAY,UACZC,SAAU,UACVC,SAAU,UACVC,OAAQ,UACRC,OAAQ,UACRC,QAAS,UACTC,UAAW,UACXC,UAAW,UACXC,UAAW,UACXC,KAAM,UACNC,YAAa,UACbC,UAAW,UACXC,IAAK,UACLC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,UAAW,UACXC,OAAQ,UACRC,MAAO,UACPC,MAAO,UACPC,WAAY,UACZC,OAAQ,UACRC,YAAa,U,8RC/IV,SAASC,EAASrQ,EAAGC,EAAGC,GAC3B,MAAO,CACHF,EAAqB,KAAlB,QAAQA,EAAG,KACdC,EAAqB,KAAlB,QAAQA,EAAG,KACdC,EAAqB,KAAlB,QAAQA,EAAG,KAEtB,CAMO,SAASoQ,EAAStQ,EAAGC,EAAGC,GAC3BF,GAAI,QAAQA,EAAG,KACfC,GAAI,QAAQA,EAAG,KACfC,GAAI,QAAQA,EAAG,KACf,IAAIwE,EAAMrE,KAAKqE,IAAI1E,EAAGC,EAAGC,GACrByE,EAAMtE,KAAKsE,IAAI3E,EAAGC,EAAGC,GACrB8B,EAAI,EACJJ,EAAI,EACJS,GAAKqC,EAAMC,GAAO,EACtB,GAAID,IAAQC,EACR/C,EAAI,EACJI,EAAI,MAEH,CACD,IAAIuO,EAAI7L,EAAMC,EAEd,OADA/C,EAAIS,EAAI,GAAMkO,GAAK,EAAI7L,EAAMC,GAAO4L,GAAK7L,EAAMC,GACvCD,GACJ,KAAK1E,EACDgC,GAAK/B,EAAIC,GAAKqQ,GAAKtQ,EAAIC,EAAI,EAAI,GAC/B,MACJ,KAAKD,EACD+B,GAAK9B,EAAIF,GAAKuQ,EAAI,EAClB,MACJ,KAAKrQ,EACD8B,GAAKhC,EAAIC,GAAKsQ,EAAI,EAClB,MACJ,QACI,MAERvO,GAAK,CACT,CACA,MAAO,CAAEA,EAAGA,EAAGJ,EAAGA,EAAGS,EAAGA,EAC5B,CACA,SAASmO,EAAQjL,EAAGkL,EAAGC,GAOnB,OANIA,EAAI,IACJA,GAAK,GAELA,EAAI,IACJA,GAAK,GAELA,EAAI,EAAI,EACDnL,EAAe,EAAImL,GAAdD,EAAIlL,GAEhBmL,EAAI,GACGD,EAEPC,EAAI,EAAI,EACDnL,GAAKkL,EAAIlL,IAAM,EAAI,EAAImL,GAAK,EAEhCnL,CACX,CAOO,SAASoL,EAAS3O,EAAGJ,EAAGS,GAC3B,IAAIrC,EACAC,EACAC,EAIJ,GAHA8B,GAAI,QAAQA,EAAG,KACfJ,GAAI,QAAQA,EAAG,KACfS,GAAI,QAAQA,EAAG,KACL,IAANT,EAEA3B,EAAIoC,EACJnC,EAAImC,EACJrC,EAAIqC,MAEH,CACD,IAAIoO,EAAIpO,EAAI,GAAMA,GAAK,EAAIT,GAAKS,EAAIT,EAAIS,EAAIT,EACxC2D,EAAI,EAAIlD,EAAIoO,EAChBzQ,EAAIwQ,EAAQjL,EAAGkL,EAAGzO,EAAI,EAAI,GAC1B/B,EAAIuQ,EAAQjL,EAAGkL,EAAGzO,GAClB9B,EAAIsQ,EAAQjL,EAAGkL,EAAGzO,EAAI,EAAI,EAC9B,CACA,MAAO,CAAEhC,EAAO,IAAJA,EAASC,EAAO,IAAJA,EAASC,EAAO,IAAJA,EACxC,CAOO,SAAS0Q,EAAS5Q,EAAGC,EAAGC,GAC3BF,GAAI,QAAQA,EAAG,KACfC,GAAI,QAAQA,EAAG,KACfC,GAAI,QAAQA,EAAG,KACf,IAAIwE,EAAMrE,KAAKqE,IAAI1E,EAAGC,EAAGC,GACrByE,EAAMtE,KAAKsE,IAAI3E,EAAGC,EAAGC,GACrB8B,EAAI,EACJC,EAAIyC,EACJ6L,EAAI7L,EAAMC,EACV/C,EAAY,IAAR8C,EAAY,EAAI6L,EAAI7L,EAC5B,GAAIA,IAAQC,EACR3C,EAAI,MAEH,CACD,OAAQ0C,GACJ,KAAK1E,EACDgC,GAAK/B,EAAIC,GAAKqQ,GAAKtQ,EAAIC,EAAI,EAAI,GAC/B,MACJ,KAAKD,EACD+B,GAAK9B,EAAIF,GAAKuQ,EAAI,EAClB,MACJ,KAAKrQ,EACD8B,GAAKhC,EAAIC,GAAKsQ,EAAI,EAClB,MACJ,QACI,MAERvO,GAAK,CACT,CACA,MAAO,CAAEA,EAAGA,EAAGJ,EAAGA,EAAGK,EAAGA,EAC5B,CAOO,SAAS4O,EAAS7O,EAAGJ,EAAGK,GAC3BD,EAAsB,GAAlB,QAAQA,EAAG,KACfJ,GAAI,QAAQA,EAAG,KACfK,GAAI,QAAQA,EAAG,KACf,IAAI6E,EAAIzG,KAAKyQ,MAAM9O,GACf+O,EAAI/O,EAAI8E,EACRvB,EAAItD,GAAK,EAAIL,GACb6O,EAAIxO,GAAK,EAAI8O,EAAInP,GACjB8O,EAAIzO,GAAK,GAAK,EAAI8O,GAAKnP,GACvBoP,EAAMlK,EAAI,EACV9G,EAAI,CAACiC,EAAGwO,EAAGlL,EAAGA,EAAGmL,EAAGzO,GAAG+O,GACvB/Q,EAAI,CAACyQ,EAAGzO,EAAGA,EAAGwO,EAAGlL,EAAGA,GAAGyL,GACvB9Q,EAAI,CAACqF,EAAGA,EAAGmL,EAAGzO,EAAGA,EAAGwO,GAAGO,GAC3B,MAAO,CAAEhR,EAAO,IAAJA,EAASC,EAAO,IAAJA,EAASC,EAAO,IAAJA,EACxC,CAOO,SAAS+Q,EAASjR,EAAGC,EAAGC,EAAGsC,GAC9B,IAAIc,EAAM,EACN,QAAKjD,KAAKC,MAAMN,GAAG8D,SAAS,MAC5B,QAAKzD,KAAKC,MAAML,GAAG6D,SAAS,MAC5B,QAAKzD,KAAKC,MAAMJ,GAAG4D,SAAS,MAGhC,OAAItB,GACAc,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,KAChC5N,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,KAChC5N,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,IACzB5N,EAAI,GAAG4N,OAAO,GAAK5N,EAAI,GAAG4N,OAAO,GAAK5N,EAAI,GAAG4N,OAAO,GAExD5N,EAAI6N,KAAK,GACpB,CAQO,SAASC,EAAUpR,EAAGC,EAAGC,EAAGC,EAAGwC,GAClC,IAAIW,EAAM,EACN,QAAKjD,KAAKC,MAAMN,GAAG8D,SAAS,MAC5B,QAAKzD,KAAKC,MAAML,GAAG6D,SAAS,MAC5B,QAAKzD,KAAKC,MAAMJ,GAAG4D,SAAS,MAC5B,QAAKuN,EAAoBlR,KAG7B,OAAIwC,GACAW,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,KAChC5N,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,KAChC5N,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,KAChC5N,EAAI,GAAGc,WAAWd,EAAI,GAAG4N,OAAO,IACzB5N,EAAI,GAAG4N,OAAO,GAAK5N,EAAI,GAAG4N,OAAO,GAAK5N,EAAI,GAAG4N,OAAO,GAAK5N,EAAI,GAAG4N,OAAO,GAE3E5N,EAAI6N,KAAK,GACpB,CAeO,SAASE,EAAoBd,GAChC,OAAOlQ,KAAKC,MAAsB,IAAhBgR,WAAWf,IAAUzM,SAAS,GACpD,CAEO,SAASyN,EAAoBvP,GAChC,OAAOwP,EAAgBxP,GAAK,GAChC,CAEO,SAASwP,EAAgBC,GAC5B,OAAOC,SAASD,EAAK,GACzB,CACO,SAASE,EAAoBjS,GAChC,MAAO,CACHM,EAAGN,GAAS,GACZO,GAAY,MAARP,IAAmB,EACvBQ,EAAW,IAARR,EAEX,C,8FCpNO,SAASkS,EAAWlS,GACvB,IAAIK,EAAM,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GACvBC,EAAI,EACJyB,EAAI,KACJK,EAAI,KACJI,EAAI,KACJ3B,GAAK,EACLH,GAAS,EA6Bb,MA5BqB,kBAAVb,IACPA,EAAQmS,EAAoBnS,IAEX,kBAAVA,IACHoS,EAAepS,EAAMM,IAAM8R,EAAepS,EAAMO,IAAM6R,EAAepS,EAAMQ,IAC3EH,GAAM,OAASL,EAAMM,EAAGN,EAAMO,EAAGP,EAAMQ,GACvCQ,GAAK,EACLH,EAAwC,MAA/BwR,OAAOrS,EAAMM,GAAGgS,QAAQ,GAAa,OAAS,OAElDF,EAAepS,EAAMsC,IAAM8P,EAAepS,EAAMkC,IAAMkQ,EAAepS,EAAMuC,IAChFL,GAAI,QAAoBlC,EAAMkC,GAC9BK,GAAI,QAAoBvC,EAAMuC,GAC9BlC,GAAM,QAASL,EAAMsC,EAAGJ,EAAGK,GAC3BvB,GAAK,EACLH,EAAS,OAEJuR,EAAepS,EAAMsC,IAAM8P,EAAepS,EAAMkC,IAAMkQ,EAAepS,EAAM2C,KAChFT,GAAI,QAAoBlC,EAAMkC,GAC9BS,GAAI,QAAoB3C,EAAM2C,GAC9BtC,GAAM,QAASL,EAAMsC,EAAGJ,EAAGS,GAC3B3B,GAAK,EACLH,EAAS,OAETiD,OAAO7C,UAAUsR,eAAeC,KAAKxS,EAAO,OAC5CS,EAAIT,EAAMS,IAGlBA,GAAI,QAAWA,GACR,CACHO,GAAIA,EACJH,OAAQb,EAAMa,QAAUA,EACxBP,EAAGK,KAAKsE,IAAI,IAAKtE,KAAKqE,IAAI3E,EAAIC,EAAG,IACjCC,EAAGI,KAAKsE,IAAI,IAAKtE,KAAKqE,IAAI3E,EAAIE,EAAG,IACjCC,EAAGG,KAAKsE,IAAI,IAAKtE,KAAKqE,IAAI3E,EAAIG,EAAG,IACjCC,EAAGA,EAEX,CAEA,IAAIgS,EAAc,gBAEdC,EAAa,uBAEbC,EAAW,MAAMlQ,OAAOiQ,EAAY,SAASjQ,OAAOgQ,EAAa,KAIjEG,EAAoB,cAAcnQ,OAAOkQ,EAAU,cAAclQ,OAAOkQ,EAAU,cAAclQ,OAAOkQ,EAAU,aACjHE,EAAoB,cAAcpQ,OAAOkQ,EAAU,cAAclQ,OAAOkQ,EAAU,cAAclQ,OAAOkQ,EAAU,cAAclQ,OAAOkQ,EAAU,aAChJG,EAAW,CACXH,SAAU,IAAII,OAAOJ,GACrBtS,IAAK,IAAI0S,OAAO,MAAQH,GACxB9M,KAAM,IAAIiN,OAAO,OAASF,GAC1BnQ,IAAK,IAAIqQ,OAAO,MAAQH,GACxBI,KAAM,IAAID,OAAO,OAASF,GAC1BxQ,IAAK,IAAI0Q,OAAO,MAAQH,GACxBK,KAAM,IAAIF,OAAO,OAASF,GAC1BK,KAAM,uDACNC,KAAM,uDACNC,KAAM,uEACNC,KAAM,wEAMH,SAASlB,EAAoBnS,GAEhC,GADAA,EAAQA,EAAMsT,OAAOC,cACA,IAAjBvT,EAAMgE,OACN,OAAO,EAEX,IAAIwP,GAAQ,EACZ,GAAI,IAAMxT,GACNA,EAAQ,IAAMA,GACdwT,GAAQ,OAEP,GAAc,gBAAVxT,EACL,MAAO,CAAEM,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGI,OAAQ,QAM7C,IAAI4S,EAAQX,EAASzS,IAAIqT,KAAK1T,GAC9B,OAAIyT,EACO,CAAEnT,EAAGmT,EAAM,GAAIlT,EAAGkT,EAAM,GAAIjT,EAAGiT,EAAM,KAEhDA,EAAQX,EAAShN,KAAK4N,KAAK1T,GACvByT,EACO,CAAEnT,EAAGmT,EAAM,GAAIlT,EAAGkT,EAAM,GAAIjT,EAAGiT,EAAM,GAAIhT,EAAGgT,EAAM,KAE7DA,EAAQX,EAASpQ,IAAIgR,KAAK1T,GACtByT,EACO,CAAEnR,EAAGmR,EAAM,GAAIvR,EAAGuR,EAAM,GAAI9Q,EAAG8Q,EAAM,KAEhDA,EAAQX,EAASE,KAAKU,KAAK1T,GACvByT,EACO,CAAEnR,EAAGmR,EAAM,GAAIvR,EAAGuR,EAAM,GAAI9Q,EAAG8Q,EAAM,GAAIhT,EAAGgT,EAAM,KAE7DA,EAAQX,EAASzQ,IAAIqR,KAAK1T,GACtByT,EACO,CAAEnR,EAAGmR,EAAM,GAAIvR,EAAGuR,EAAM,GAAIlR,EAAGkR,EAAM,KAEhDA,EAAQX,EAASG,KAAKS,KAAK1T,GACvByT,EACO,CAAEnR,EAAGmR,EAAM,GAAIvR,EAAGuR,EAAM,GAAIlR,EAAGkR,EAAM,GAAIhT,EAAGgT,EAAM,KAE7DA,EAAQX,EAASO,KAAKK,KAAK1T,GACvByT,EACO,CACHnT,GAAG,QAAgBmT,EAAM,IACzBlT,GAAG,QAAgBkT,EAAM,IACzBjT,GAAG,QAAgBiT,EAAM,IACzBhT,GAAG,QAAoBgT,EAAM,IAC7B5S,OAAQ2S,EAAQ,OAAS,SAGjCC,EAAQX,EAASK,KAAKO,KAAK1T,GACvByT,EACO,CACHnT,GAAG,QAAgBmT,EAAM,IACzBlT,GAAG,QAAgBkT,EAAM,IACzBjT,GAAG,QAAgBiT,EAAM,IACzB5S,OAAQ2S,EAAQ,OAAS,QAGjCC,EAAQX,EAASM,KAAKM,KAAK1T,GACvByT,EACO,CACHnT,GAAG,QAAgBmT,EAAM,GAAKA,EAAM,IACpClT,GAAG,QAAgBkT,EAAM,GAAKA,EAAM,IACpCjT,GAAG,QAAgBiT,EAAM,GAAKA,EAAM,IACpChT,GAAG,QAAoBgT,EAAM,GAAKA,EAAM,IACxC5S,OAAQ2S,EAAQ,OAAS,SAGjCC,EAAQX,EAASI,KAAKQ,KAAK1T,KACvByT,GACO,CACHnT,GAAG,QAAgBmT,EAAM,GAAKA,EAAM,IACpClT,GAAG,QAAgBkT,EAAM,GAAKA,EAAM,IACpCjT,GAAG,QAAgBiT,EAAM,GAAKA,EAAM,IACpC5S,OAAQ2S,EAAQ,OAAS,eAIrC,CAKO,SAASpB,EAAepS,GAC3B,OAAOsE,QAAQwO,EAASH,SAASe,KAAKrB,OAAOrS,IACjD,C,wBClLO,SAAS2T,EAAQ1M,EAAGjC,GACnB4O,EAAe3M,KACfA,EAAI,QAER,IAAI4M,EAAYC,EAAa7M,GAO7B,OANAA,EAAY,MAARjC,EAAciC,EAAItG,KAAKsE,IAAID,EAAKrE,KAAKqE,IAAI,EAAG4M,WAAW3K,KAEvD4M,IACA5M,EAAI+K,SAASK,OAAOpL,EAAIjC,GAAM,IAAM,KAGpCrE,KAAKoT,IAAI9M,EAAIjC,GAAO,KACb,GAOPiC,EAJQ,MAARjC,GAIKiC,EAAI,EAAKA,EAAIjC,EAAOA,EAAMiC,EAAIjC,GAAO4M,WAAWS,OAAOrN,IAKvDiC,EAAIjC,EAAO4M,WAAWS,OAAOrN,IAE/BiC,EACX,CAKO,SAAS+M,EAAQjC,GACpB,OAAOpR,KAAKsE,IAAI,EAAGtE,KAAKqE,IAAI,EAAG+M,GACnC,CAMO,SAAS6B,EAAe3M,GAC3B,MAAoB,kBAANA,IAAsC,IAApBA,EAAEgN,QAAQ,MAAiC,IAAlBrC,WAAW3K,EACxE,CAKO,SAAS6M,EAAa7M,GACzB,MAAoB,kBAANA,IAAsC,IAApBA,EAAEgN,QAAQ,IAC9C,CAKO,SAASC,EAAWzT,GAKvB,OAJAA,EAAImR,WAAWnR,IACX0T,MAAM1T,IAAMA,EAAI,GAAKA,EAAI,KACzBA,EAAI,GAEDA,CACX,CAKO,SAAS2T,EAAoBnN,GAChC,OAAIA,GAAK,EACE,GAAGxE,OAAmB,IAAZ4R,OAAOpN,GAAU,KAE/BA,CACX,CAKO,SAASqN,EAAKC,GACjB,OAAoB,IAAbA,EAAEvQ,OAAe,IAAMuQ,EAAIlC,OAAOkC,EAC7C,C","sources":["webpack://DreamsLMS/./node_modules/@ctrl/tinycolor/dist/module/index.js","webpack://DreamsLMS/./node_modules/@ctrl/tinycolor/dist/module/css-color-names.js","webpack://DreamsLMS/./node_modules/@ctrl/tinycolor/dist/module/conversion.js","webpack://DreamsLMS/./node_modules/@ctrl/tinycolor/dist/module/format-input.js","webpack://DreamsLMS/./node_modules/@ctrl/tinycolor/dist/module/util.js"],"sourcesContent":["import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { inputToRGB } from './format-input';\nimport { bound01, boundAlpha, clamp01 } from './util.js';\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = ''; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        var rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns whether the color is monochrome.\n     */\n    TinyColor.prototype.isMonochrome = function () {\n        var s = this.toHsl().s;\n        return s === 0;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # prefixed.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return '#' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # prefixed.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return '#' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.\n     * @param allowShortChar will shorten hex value to 3 or 4 char if possible\n     */\n    TinyColor.prototype.toHexShortString = function (allowShortChar) {\n        if (allowShortChar === void 0) { allowShortChar = false; }\n        return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\"); };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\n        return this.a === 1\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('white', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('black', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        var alpha = fg.a + bg.a * (1 - fg.a);\n        return new TinyColor({\n            r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,\n            g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,\n            b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,\n            a: alpha,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\nexport { TinyColor };\n// kept for backwards compatability with v1\nexport function tinycolor(color, opts) {\n    if (color === void 0) { color = ''; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\n","// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport var names = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    goldenrod: '#daa520',\n    gold: '#ffd700',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavenderblush: '#fff0f5',\n    lavender: '#e6e6fa',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n","import { bound01, pad2 } from './util.js';\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, l: l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [v, q, p, p, t, v][mod];\n    var g = [t, v, v, q, p, p][mod];\n    var b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n        pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */\nexport function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join('');\n}\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexport function numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n","/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\nimport { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb, } from './conversion.js';\nimport { names } from './css-color-names.js';\nimport { boundAlpha, convertToPercentage } from './util.js';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n","/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nexport function bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = '100%';\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn't already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn't already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nexport function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nexport function isOnePointZero(n) {\n    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;\n}\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nexport function isPercentage(n) {\n    return typeof n === 'string' && n.indexOf('%') !== -1;\n}\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nexport function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\n/**\n * Replace a decimal with it's percentage value\n * @hidden\n */\nexport function convertToPercentage(n) {\n    if (n <= 1) {\n        return \"\".concat(Number(n) * 100, \"%\");\n    }\n    return n;\n}\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nexport function pad2(c) {\n    return c.length === 1 ? '0' + c : String(c);\n}\n"],"names":["TinyColor","color","opts","_a","this","originalInput","rgb","r","g","b","a","roundA","Math","round","format","gradientType","isValid","ok","prototype","isDark","getBrightness","isLight","toRgb","getLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","isMonochrome","s","toHsl","toHsv","hsv","h","v","toHsvString","concat","hsl","l","toHslString","toHex","allow3Char","toHexString","toHex8","allow4Char","toHex8String","toHexShortString","allowShortChar","toRgbString","toPercentageRgb","fmt","x","toPercentageRgbString","rnd","toName","hex","_i","Object","entries","length","_b","key","value","toString","formatSet","Boolean","formattedString","hasAlpha","needsAlphaFormat","startsWith","toNumber","clone","lighten","amount","brighten","max","min","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","p","rgba","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","n","result","increment","i","equals","names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","goldenrod","gold","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavenderblush","lavender","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","rgbToRgb","rgbToHsl","d","hue2rgb","q","t","hslToRgb","rgbToHsv","hsvToRgb","floor","f","mod","rgbToHex","charAt","join","rgbaToHex","convertDecimalToHex","parseFloat","convertHexToDecimal","parseIntFromHex","val","parseInt","numberInputToObject","inputToRGB","stringInputToObject","isValidCSSUnit","String","substr","hasOwnProperty","call","CSS_INTEGER","CSS_NUMBER","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","RegExp","hsla","hsva","hex3","hex6","hex4","hex8","trim","toLowerCase","named","match","exec","bound01","isOnePointZero","isPercent","isPercentage","abs","clamp01","indexOf","boundAlpha","isNaN","convertToPercentage","Number","pad2","c"],"sourceRoot":""}